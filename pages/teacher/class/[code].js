import Head from 'next/head'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { useState, useEffect, useContext } from 'react'
import axios from 'axios'

import { AuthContext } from '../../../contexts/Auth.Context'
import { ClassroomsContext } from '../../../contexts/Classrooms.Context'

const Classroom = () => {
    const router = useRouter()
    const { auth, setAuth, getAccessToken } = useContext(AuthContext)
    const { classrooms, setClassrooms } = useContext(ClassroomsContext)

    const [classroom, setClassroom] = useState()
    const [isDashboard, setIsDashboard] = useState(true)
    const [names, setNames] = useState()

    useEffect(() => {
        const { code } = router.query
        if (!code) return

        if (!classrooms) {
            getAccessToken().then((accessToken) => {
                axios.get(process.env.NEXT_PUBLIC_BACKEND_HTTP_BASE+'core/classrooms/'+code+'/', {
                    headers: {'Authorization': 'Bearer '+accessToken},
                })
                .then(res => {
                    setClassroom(res.data)
                    setClassrooms([res.data])
                })
                .catch(res => {
                    console.log(res)
                })
            })
        } else {
            const classroom = classrooms.filter(classroom => classroom.code === code)[0]
            setClassroom(classroom)
        }
    }, [router.query])

    useEffect(() => {
        if (!classroom) return

        getAccessToken().then((accessToken) => {
            axios.get(process.env.NEXT_PUBLIC_BACKEND_HTTP_BASE+'core/student_profiles/', {
                headers: {'Authorization': 'Bearer '+accessToken},
                params: {'code': classroom.code}
            })
            .then(res => {
                setNames(res.data)
            })
        })
    }, [classroom])

    const changePage = () => {
        setIsDashboard(!isDashboard)
    }

    const changeStatus = () => {
        const newClassroom = {...classroom, status: !classroom.status ? 1 : 0}
        updateClassroom(newClassroom)
    }

    const removeIndex = (index) => {
        const newClassroom = {...classroom, student_indexes: classroom.student_indexes.filter(i => i !== parseInt(index))}
        updateClassroom(newClassroom)
    }

    const addStudent = () => {
        // New student will have the largest index number
        const newClassroom = {...classroom, student_indexes: [...classroom.student_indexes, Math.max(...classroom.student_indexes)+1]}
        updateClassroom(newClassroom)
    }

    const updateClassroom = (newClassroom) => {
        getAccessToken().then((accessToken) => {
            axios.put(process.env.NEXT_PUBLIC_BACKEND_HTTP_BASE+'core/classrooms/'+newClassroom.id+'/', newClassroom, {
                headers: {'Authorization': 'Bearer '+accessToken},
            })
            .then(res => {
                setClassroom(res.data)
                setClassrooms([...classrooms.filter(cr => cr.id !== res.data.id), res.data])
            })
        })
    }

    const updateName = (index, name) => {
        getAccessToken().then((accessToken) => {
            axios.put(process.env.NEXT_PUBLIC_BACKEND_HTTP_BASE+'core/student_profiles/'+classroom.id+'/', {
                code: classroom.code, index, name
            }, {
                headers: {'Authorization': 'Bearer '+accessToken},
            })
            .then(res => {
                setNames([...names.filter(n => n.index !== index), {index, name}])
            })
        })
    }

    return (
        <div>
            <Head>
                <title>Teacher | LMS</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            { classroom && (
                <div className="flex sm:flex-row flex-col min-h-screen w-full">
                    <div className="pt-10 px-4">
                        <h1 className="text-3xl font-bold px-2">{classroom.name}</h1>
                        <p className={`${classroom.status ? "text-green-600" : "text-red-500"} px-2 mb-4 font-bold`}>{classroom.status ? 'Active' : 'Archived'}</p>
                        <button className={`${isDashboard ? "bg-gray-200" : "hover:bg-gray-200"} text-lg font-semibold px-2 py-1 my-1 w-full text-left rounded-lg`} onClick={changePage}>Dashboard</button>
                        <button className={`${(!isDashboard) ? "bg-gray-200" : "hover:bg-gray-200"} text-lg font-semibold px-2 py-1 my-1 w-full text-left rounded-lg`} onClick={changePage}>Settings</button>

                        <div className="flex flex-col mt-8 px-2 py-2 text-lg bg-black rounded-lg text-white">
                            <div><p className="text-base pb-1">Your class code is</p></div>
                            <div><p className="text-center py-1 font-mono bg-white text-black rounded">{classroom.code}</p></div>
                        </div>

                    </div>
                    <div className="bg-gray-100 w-full pt-8 px-8">
                        { isDashboard ?
                            <Dashboard classroom={classroom} removeIndex={removeIndex} addStudent={addStudent} names={names} updateName={updateName} /> :
                            <Settings classroom={classroom} changeStatus={changeStatus} />
                        }
                    </div>
                </div>
            )}

            <footer>
            </footer>
        </div>
    )
}

export default Classroom

const Dashboard = ({ classroom, names, removeIndex, addStudent, updateName }) => {
    const [tableNames, setTableNames] = useState()

    useEffect(() => {
        setTableNames(names)
    }, [names])

    if (!tableNames) return <h1></h1>

    return (
        <>
            <h1 className="text-5xl font-semibold mb-8">Dashboard</h1>
            <table>
                <thead>
                    <tr className="border-2">
                        <th className="border-r-2 px-2 py-2 "><p>Index</p></th>
                        <th className="border-r-2 px-2 py-2 "><p>Name</p></th>
                        <th className="border-r-2 px-2 py-2 "><p>Actions</p></th>
                    </tr>
                </thead>
                <tbody>
                    { classroom.student_indexes.map((index, i) => {
                        return (
                            <tr className="border-2" key={i}>
                                <td className="border-r-2 px-2 py-2 "><p>{index}</p></td>
                                <td className="border-r-2 px-2 py-2"><input
                                    onChange={e => setTableNames([...tableNames.filter(n => n.index !== index), {index:index, name: e.target.value}])}
                                    onBlur={e => updateName(index, tableNames.filter(n => n.index === index)[0].name)}
                                    className="outline-none focus:border-gray-500 border-b-2 border-gray-300 bg-gray-100"
                                    value={tableNames.filter(name => name.index === index)[0].name}
                                /></td>
                                <td className="px-2 py-2"><button value={index} className="py-1 px-2 bg-red-500 text-white rounded" onClick={e => removeIndex(e.target.value)}>Delete</button></td>
                            </tr>
                        )
                    })}
                </tbody>
            </table>
            <button className="mt-8 py-1 px-2 border-2 border-gray-500 text-sm text-gray-500 rounded hover:bg-gray-500 hover:text-white" onClick={addStudent}>Add Student</button>
        </>
    )
}

const Settings = ({ classroom, changeStatus }) => {
    return (
        <>
            <h1 className="text-5xl font-semibold mb-8">Settings</h1>
            {classroom.status ? (
                <button className="py-1 px-2 bg-red-500 text-white font-bold" onClick={changeStatus}>Archive</button>
            ) : (
                <button className="py-1 px-2 bg-green-600 text-white font-bold" onClick={changeStatus}>Activate</button>
            )}
        </>
    )
}
